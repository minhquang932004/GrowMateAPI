// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using GrowMate.Repositories.Models;
using Microsoft.EntityFrameworkCore;

namespace GrowMate.Repositories.Data;

public partial class EXE201_GrowMateContext : DbContext
{
    public EXE201_GrowMateContext()
    {
    }

    public EXE201_GrowMateContext(DbContextOptions<EXE201_GrowMateContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Adoption> Adoptions { get; set; }

    public virtual DbSet<Camera> Cameras { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<Farmer> Farmers { get; set; }

    public virtual DbSet<Medium> Media { get; set; }

    public virtual DbSet<MonthlyReport> MonthlyReports { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<Post> Posts { get; set; }

    public virtual DbSet<PostComment> PostComments { get; set; }

    public virtual DbSet<Tree> Trees { get; set; }

    public virtual DbSet<TreeListing> TreeListings { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<EmailVerification> EmailVerifications { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Adoption>(entity =>
        {
            entity.HasKey(e => e.AdoptionId).HasName("PK__adoption__8A58034587467DD0");

            entity.ToTable("adoptions");

            entity.Property(e => e.AdoptionId).HasColumnName("adoption_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("end_date");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("active")
                .HasColumnName("status");
            entity.Property(e => e.TreeId).HasColumnName("tree_id");

            entity.HasOne(d => d.Customer).WithMany(p => p.Adoptions)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_adoptions_customers");

            entity.HasOne(d => d.Tree).WithMany(p => p.Adoptions)
                .HasForeignKey(d => d.TreeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_adoptions_trees");
        });

        modelBuilder.Entity<Camera>(entity =>
        {
            entity.HasKey(e => e.CameraId).HasName("PK__cameras__29277C9CE86A7234");

            entity.ToTable("cameras");

            entity.HasIndex(e => e.TreeId, "UQ__cameras__B80FA6994C6F5403").IsUnique();

            entity.Property(e => e.CameraId).HasColumnName("camera_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.HlsUrl).HasColumnName("hls_url");
            entity.Property(e => e.RtmpUrl).HasColumnName("rtmp_url");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("active")
                .HasColumnName("status");
            entity.Property(e => e.TreeId).HasColumnName("tree_id");

            entity.HasOne(d => d.Tree).WithOne(p => p.Camera)
                .HasForeignKey<Camera>(d => d.TreeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_cameras_trees");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__customer__CD65CB851E551743");

            entity.ToTable("customers");

            entity.Property(e => e.CustomerId)
                .ValueGeneratedNever()
                .HasColumnName("customer_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.ShippingAddress).HasColumnName("shipping_address");
            entity.Property(e => e.WalletBalance)
                .HasDefaultValue(0.00m)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("wallet_balance");

            entity.HasOne(d => d.CustomerNavigation).WithOne(p => p.Customer)
                .HasForeignKey<Customer>(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_customers_users");
        });

        modelBuilder.Entity<Farmer>(entity =>
        {
            entity.HasKey(e => e.FarmerId).HasName("PK__farmers__C61558250D572FE6");

            entity.ToTable("farmers");

            entity.Property(e => e.FarmerId)
                .ValueGeneratedNever()
                .HasColumnName("farmer_id");
            entity.Property(e => e.ContactPhone)
                .HasMaxLength(20)
                .HasColumnName("contact_phone");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.FarmAddress)
                .IsRequired()
                .HasColumnName("farm_address");
            entity.Property(e => e.FarmName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("farm_name");
            entity.Property(e => e.VerificationStatus)
                .HasMaxLength(50)
                .HasDefaultValue("pending")
                .HasColumnName("verification_status");

            entity.HasOne(d => d.FarmerNavigation).WithOne(p => p.Farmer)
                .HasForeignKey<Farmer>(d => d.FarmerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_farmers_users");
        });

        modelBuilder.Entity<Medium>(entity =>
        {
            entity.HasKey(e => e.MediaId).HasName("PK__media__D0A840F488C30D59");

            entity.ToTable("media");

            entity.Property(e => e.MediaId).HasColumnName("media_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.MediaType)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("media_type");
            entity.Property(e => e.MediaUrl)
                .IsRequired()
                .HasColumnName("media_url");
            entity.Property(e => e.PostId).HasColumnName("post_id");
            entity.Property(e => e.ReportId).HasColumnName("report_id");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Post).WithMany(p => p.Media)
                .HasForeignKey(d => d.PostId)
                .HasConstraintName("FK_media_posts");

            entity.HasOne(d => d.Report).WithMany(p => p.Media)
                .HasForeignKey(d => d.ReportId)
                .HasConstraintName("FK_media_reports");
        });

        modelBuilder.Entity<MonthlyReport>(entity =>
        {
            entity.HasKey(e => e.ReportId).HasName("PK__monthly___779B7C58AB17BD28");

            entity.ToTable("monthly_reports");

            entity.HasIndex(e => new { e.AdoptionId, e.ReportMonth, e.ReportYear }, "UQ_report").IsUnique();

            entity.Property(e => e.ReportId).HasColumnName("report_id");
            entity.Property(e => e.Activities)
                .IsRequired()
                .HasColumnName("activities");
            entity.Property(e => e.AdoptionId).HasColumnName("adoption_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.FarmerId).HasColumnName("farmer_id");
            entity.Property(e => e.Notes).HasColumnName("notes");
            entity.Property(e => e.PublishedAt)
                .HasColumnType("datetime")
                .HasColumnName("published_at");
            entity.Property(e => e.ReportMonth).HasColumnName("report_month");
            entity.Property(e => e.ReportYear).HasColumnName("report_year");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("draft")
                .HasColumnName("status");

            entity.HasOne(d => d.Adoption).WithMany(p => p.MonthlyReports)
                .HasForeignKey(d => d.AdoptionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_reports_adoptions");

            entity.HasOne(d => d.Farmer).WithMany(p => p.MonthlyReports)
                .HasForeignKey(d => d.FarmerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_reports_farmers");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.NotificationId).HasName("PK__notifica__E059842F836DBCF6");

            entity.ToTable("notifications");

            entity.Property(e => e.NotificationId).HasColumnName("notification_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.IsRead)
                .HasDefaultValue(false)
                .HasColumnName("is_read");
            entity.Property(e => e.Message)
                .IsRequired()
                .HasColumnName("message");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("type");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.User).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_notifications_users");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("PK__payments__ED1FC9EAB0E84E7F");

            entity.ToTable("payments");

            entity.HasIndex(e => e.TransactionReference, "UQ__payments__F0DAF2E8EF3F0A58").IsUnique();

            entity.Property(e => e.PaymentId).HasColumnName("payment_id");
            entity.Property(e => e.AdoptionId).HasColumnName("adoption_id");
            entity.Property(e => e.Amount)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("amount");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("payment_method");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("pending")
                .HasColumnName("status");
            entity.Property(e => e.TransactionReference)
                .HasMaxLength(255)
                .HasColumnName("transaction_reference");

            entity.HasOne(d => d.Adoption).WithMany(p => p.Payments)
                .HasForeignKey(d => d.AdoptionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_payments_adoptions");
        });

        modelBuilder.Entity<Post>(entity =>
        {
            entity.HasKey(e => e.PostId).HasName("PK__posts__3ED78766B83518DA");

            entity.ToTable("posts");

            entity.Property(e => e.PostId).HasColumnName("post_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.FarmName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("farm_name");
            entity.Property(e => e.FarmerId).HasColumnName("farmer_id");
            entity.Property(e => e.HarvestFrequency)
                .HasDefaultValue(1)
                .HasColumnName("harvest_frequency");
            entity.Property(e => e.HarvestWeight)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("harvest_weight");
            entity.Property(e => e.Origin)
                .HasMaxLength(255)
                .HasColumnName("origin");
            entity.Property(e => e.PricePerYear)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("price_per_year");
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("product_name");
            entity.Property(e => e.ProductType)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("product_type");
            entity.Property(e => e.ProductVariety)
                .HasMaxLength(255)
                .HasColumnName("product_variety");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("draft")
                .HasColumnName("status");
            entity.Property(e => e.TreeQuantity).HasColumnName("tree_quantity");
            entity.Property(e => e.Unit)
                .HasMaxLength(50)
                .HasDefaultValue("kilogram")
                .HasColumnName("unit");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Farmer).WithMany(p => p.Posts)
                .HasForeignKey(d => d.FarmerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_posts_farmers");
        });

        modelBuilder.Entity<PostComment>(entity =>
        {
            entity.HasKey(e => e.CommentId).HasName("PK__post_com__E7957687DA235530");

            entity.ToTable("post_comments");

            entity.Property(e => e.CommentId).HasColumnName("comment_id");
            entity.Property(e => e.CommentContent)
                .IsRequired()
                .HasColumnName("comment_content");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.PostId).HasColumnName("post_id");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Post).WithMany(p => p.PostComments)
                .HasForeignKey(d => d.PostId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_comments_posts");

            entity.HasOne(d => d.User).WithMany(p => p.PostComments)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_comments_users");
        });

        modelBuilder.Entity<Tree>(entity =>
        {
            entity.HasKey(e => e.TreeId).HasName("PK__trees__B80FA6985DB09352");

            entity.ToTable("trees");

            entity.HasIndex(e => e.UniqueCode, "UQ__trees__8E12EA40E90B1E6D").IsUnique();

            entity.Property(e => e.TreeId).HasColumnName("tree_id");
            entity.Property(e => e.AvailabilityStatus)
                .HasMaxLength(50)
                .HasDefaultValue("available")
                .HasColumnName("availability_status");
            entity.Property(e => e.Coordinates)
                .HasMaxLength(100)
                .HasColumnName("coordinates");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.HealthStatus)
                .HasMaxLength(50)
                .HasDefaultValue("good")
                .HasColumnName("health_status");
            entity.Property(e => e.ListingId).HasColumnName("listing_id");
            entity.Property(e => e.UniqueCode)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("unique_code");

            entity.HasOne(d => d.Listing).WithMany(p => p.Trees)
                .HasForeignKey(d => d.ListingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_trees_listings");
        });

        modelBuilder.Entity<TreeListing>(entity =>
        {
            entity.HasKey(e => e.ListingId).HasName("PK__tree_lis__89D81774268EDFD0");

            entity.ToTable("tree_listings");

            entity.HasIndex(e => e.PostId, "UQ__tree_lis__3ED787671EAC50EE").IsUnique();

            entity.Property(e => e.ListingId).HasColumnName("listing_id");
            entity.Property(e => e.AvailableQuantity).HasColumnName("available_quantity");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.FarmerId).HasColumnName("farmer_id");
            entity.Property(e => e.PostId).HasColumnName("post_id");
            entity.Property(e => e.PricePerTree)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("price_per_tree");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("active")
                .HasColumnName("status");
            entity.Property(e => e.TotalQuantity).HasColumnName("total_quantity");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Farmer).WithMany(p => p.TreeListings)
                .HasForeignKey(d => d.FarmerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_listings_farmers");

            entity.HasOne(d => d.Post).WithOne(p => p.TreeListing)
                .HasForeignKey<TreeListing>(d => d.PostId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_listings_posts");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__users__B9BE370F2257B508");

            entity.ToTable("users");

            entity.HasIndex(e => e.Email, "UQ__users__AB6E616470E93F15").IsUnique();

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("email");
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("full_name");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("password");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .HasColumnName("phone");
            entity.Property(e => e.ProfileImageUrl).HasColumnName("profile_image_url");
            entity.Property(e => e.Role).HasColumnName("role");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<EmailVerification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EmailVer__3214EC07D6D2C8E3");
            entity.ToTable("EmailVerifications");
            entity.Property(e => e.Id).HasColumnName("Id");
            entity.Property(e => e.UserId).HasColumnName("UserId");
            entity.Property(e => e.CodeHash)
                .IsRequired()
                .HasColumnName("CodeHash");
            entity.Property(e => e.ExpiresAt)
                .HasColumnType("datetime")
                .HasColumnName("ExpiresAt");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("CreatedAt");
            entity.Property(e => e.VerifiedAt)
                .HasColumnType("datetime")
                .HasColumnName("VerifiedAt");
            entity.HasOne(d => d.User).WithMany(p => p.EmailVerifications)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmailVerifications_Users");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}